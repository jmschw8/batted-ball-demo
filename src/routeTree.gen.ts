/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as OutcomeByVelocityRouteImport } from './routes/outcome-by-velocity'
import { Route as HardHitsRouteImport } from './routes/hard-hits'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AverageDistanceRouteImport } from './routes/average-distance'
import { Route as IndexRouteImport } from './routes/index'

const OutcomeByVelocityRoute = OutcomeByVelocityRouteImport.update({
  id: '/outcome-by-velocity',
  path: '/outcome-by-velocity',
  getParentRoute: () => rootRouteImport,
} as any)
const HardHitsRoute = HardHitsRouteImport.update({
  id: '/hard-hits',
  path: '/hard-hits',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AverageDistanceRoute = AverageDistanceRouteImport.update({
  id: '/average-distance',
  path: '/average-distance',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/average-distance': typeof AverageDistanceRoute
  '/dashboard': typeof DashboardRoute
  '/hard-hits': typeof HardHitsRoute
  '/outcome-by-velocity': typeof OutcomeByVelocityRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/average-distance': typeof AverageDistanceRoute
  '/dashboard': typeof DashboardRoute
  '/hard-hits': typeof HardHitsRoute
  '/outcome-by-velocity': typeof OutcomeByVelocityRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/average-distance': typeof AverageDistanceRoute
  '/dashboard': typeof DashboardRoute
  '/hard-hits': typeof HardHitsRoute
  '/outcome-by-velocity': typeof OutcomeByVelocityRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/average-distance'
    | '/dashboard'
    | '/hard-hits'
    | '/outcome-by-velocity'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/average-distance'
    | '/dashboard'
    | '/hard-hits'
    | '/outcome-by-velocity'
  id:
    | '__root__'
    | '/'
    | '/average-distance'
    | '/dashboard'
    | '/hard-hits'
    | '/outcome-by-velocity'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AverageDistanceRoute: typeof AverageDistanceRoute
  DashboardRoute: typeof DashboardRoute
  HardHitsRoute: typeof HardHitsRoute
  OutcomeByVelocityRoute: typeof OutcomeByVelocityRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/average-distance': {
      id: '/average-distance'
      path: '/average-distance'
      fullPath: '/average-distance'
      preLoaderRoute: typeof AverageDistanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hard-hits': {
      id: '/hard-hits'
      path: '/hard-hits'
      fullPath: '/hard-hits'
      preLoaderRoute: typeof HardHitsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/outcome-by-velocity': {
      id: '/outcome-by-velocity'
      path: '/outcome-by-velocity'
      fullPath: '/outcome-by-velocity'
      preLoaderRoute: typeof OutcomeByVelocityRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/average-distance' {
  const createFileRoute: CreateFileRoute<
    '/average-distance',
    FileRoutesByPath['/average-distance']['parentRoute'],
    FileRoutesByPath['/average-distance']['id'],
    FileRoutesByPath['/average-distance']['path'],
    FileRoutesByPath['/average-distance']['fullPath']
  >
}
declare module './routes/dashboard' {
  const createFileRoute: CreateFileRoute<
    '/dashboard',
    FileRoutesByPath['/dashboard']['parentRoute'],
    FileRoutesByPath['/dashboard']['id'],
    FileRoutesByPath['/dashboard']['path'],
    FileRoutesByPath['/dashboard']['fullPath']
  >
}
declare module './routes/hard-hits' {
  const createFileRoute: CreateFileRoute<
    '/hard-hits',
    FileRoutesByPath['/hard-hits']['parentRoute'],
    FileRoutesByPath['/hard-hits']['id'],
    FileRoutesByPath['/hard-hits']['path'],
    FileRoutesByPath['/hard-hits']['fullPath']
  >
}
declare module './routes/outcome-by-velocity' {
  const createFileRoute: CreateFileRoute<
    '/outcome-by-velocity',
    FileRoutesByPath['/outcome-by-velocity']['parentRoute'],
    FileRoutesByPath['/outcome-by-velocity']['id'],
    FileRoutesByPath['/outcome-by-velocity']['path'],
    FileRoutesByPath['/outcome-by-velocity']['fullPath']
  >
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AverageDistanceRoute: AverageDistanceRoute,
  DashboardRoute: DashboardRoute,
  HardHitsRoute: HardHitsRoute,
  OutcomeByVelocityRoute: OutcomeByVelocityRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
